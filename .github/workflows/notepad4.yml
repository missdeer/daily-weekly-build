name: notepad4
on: 
  schedule:
    - cron:  '0 23 * * *'
  push:
    paths:
      - '.github/workflows/notepad4.yml'
      - 'notepad4/**'
  pull_request:
    paths:
      - '.github/workflows/notepad4.yml'
      - 'notepad4/**'
      
env:
  WINDOWS_BASEKIT_URL: https://registrationcenter-download.intel.com/akdlm/IRC_NAS/f5881e61-dcdc-40f1-9bd9-717081ac623c/intel-oneapi-base-toolkit-2025.2.1.46_offline.exe
  WINDOWS_HPCKIT_URL: https://registrationcenter-download.intel.com/akdlm/IRC_NAS/e63ac2b4-8a9a-4768-979a-399a8b6299de/intel-oneapi-hpc-toolkit-2025.2.1.46_offline.exe
  WINDOWS_CPP_COMPONENTS: intel.oneapi.win.cpp-dpcpp-common
  WINDOWS_DPCPP_COMPONENTS: intel.oneapi.win.cpp-dpcpp-common
  CACHE_NUMBER: 5
  SAMPLES_TAG: 2025.2.0
  AI_SAMPLES_TAG: 2025.0.0
  COMPILER_VERSION: 2025.2.0
  TBB_VERSION: 2022.2.0
  VS_VER: vs2022     
  clang_link: https://github.com/llvm/llvm-project/releases/download/llvmorg-21.1.1/LLVM-21.1.1-win64.exe      
  
  
jobs:
  notepad4-nightly-msvc:
    runs-on: windows-latest
    strategy:
      matrix:
        toolset: [cl, icx, clang-cl]
        msvc_arch: [x64]
        avx512: [ON, OFF]
        include:
          - toolset: cl
            desc: MSVC
          - toolset: icx
            desc: oneAPI-Intel-CPU-Only
          - toolset: clang-cl        
            desc: LLVM-Clang-MSVC
    env:
      targetName: notepad4-${{ matrix.toolset }}
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ github.head_ref }}
          fetch-depth: 1
          submodules: true
      
      - name: Set up clang for Windows
        if: matrix.toolset == 'clang-cl'
        shell: cmd
        run: |
          mkdir llvm
          cd llvm
          curl.exe -o LLVM.exe -L ${{ env.clang_link }}
          7z.exe x LLVM.exe
          cd ..

      - name: cache intel install
        if: matrix.toolset == 'icx'
        id: cache-install
        uses: actions/cache@v4
        with:
          path: |
              C:\Program Files (x86)\Intel\oneAPI\setvars-vcvarsall.bat
              C:\Program Files (x86)\Intel\oneAPI\compiler
          key: install-${{ env.CACHE_NUMBER }}-${{ env.WINDOWS_HPCKIT_URL }}-${{ env.WINDOWS_CPP_COMPONENTS }}-compiler-${{ hashFiles('**/scripts/cache_exclude_windows.sh') }}

      - name: install intel
        if: steps.cache-install.outputs.cache-hit != 'true' && matrix.toolset == 'icx'
        run: |
          git clone --depth=1 https://github.com/oneapi-src/oneapi-ci.git oneapi-ci
          cd oneapi-ci
          scripts/install_windows.bat ${{ env.WINDOWS_HPCKIT_URL }} ${{ env.WINDOWS_CPP_COMPONENTS }}

      - name: restore registry on cache hit
        if: steps.cache-install.outputs.cache-hit == 'true' && matrix.toolset == 'icx'
        run:  |
          git clone --depth=1 https://github.com/oneapi-src/oneapi-ci.git oneapi-ci
          cd oneapi-ci
          scripts/restore_registry.bat ${{ env.COMPILER_VERSION }} ${{ env.TBB_VERSION }}

      - name: clone notepad4
        shell: cmd
        run: |
          git clone --recursive https://github.com/zufuliu/notepad4.git notepad4-src
          copy notepad4\CMakeLists.txt notepad4-src\
          
      - name: apply avx512 patch
        if: matrix.avx512 == 'ON'
        shell: cmd
        run: |
          copy notepad4\avx512.patch notepad4-src\
          cd notepad4-src
          git apply avx512.patch
          cd ..
          
      - name: build
        shell: cmd
        env:
          vc_arch: ${{ matrix.msvc_arch }}
        run: |
          call "C:\Program Files\Microsoft Visual Studio\2022\Enterprise\VC\Auxiliary\Build\vcvarsall.bat" %vc_arch%
          for /f "tokens=* usebackq" %%f in (`dir /b "C:\Program Files (x86)\Intel\oneAPI\compiler\" ^| findstr /V latest ^| sort`) do @set "LATEST_VERSION=%%f"
          echo %LATEST_VERSION%
          call "C:\Program Files (x86)\Intel\oneAPI\compiler\%LATEST_VERSION%\env\vars.bat"
          set PATH="C:\Program Files (x86)\Intel\oneAPI\compiler\%LATEST_VERSION%\bin\";%CD%\llvm\bin;%CD%\jom;%PATH%
          cmake -DAVX512=${{ matrix.avx512 }} -DCMAKE_BUILD_TYPE=Release -DCMAKE_C_COMPILER=${{ matrix.toolset }} -DCMAKE_CXX_COMPILER=${{ matrix.toolset }} -G Ninja -S notepad4-src -B cmake-build
          cmake --build cmake-build --parallel --verbose
          mkdir bin
          copy cmake-build\notepad4.exe bin\
          copy cmake-build\matepath.exe bin\
          cd ..
          
      - name: copy oneAPI redist
        if: matrix.toolset == 'icx'
        shell: cmd
        run: |
          for /f "tokens=* usebackq" %%f in (`dir /b "C:\Program Files (x86)\Intel\oneAPI\compiler\" ^| findstr /V latest ^| sort`) do @set "LATEST_VERSION=%%f"
          echo %LATEST_VERSION%        
          copy /y "C:\Program Files (x86)\Intel\oneAPI\compiler\%LATEST_VERSION%\bin\libmmd.dll" bin\

      - name: upload executable artifact
        uses: actions/upload-artifact@v4
        if: matrix.avx512 == 'OFF'
        with:
          path: bin
          name: notepad4-${{ matrix.desc }}-avx2

      - name: upload executable artifact
        uses: actions/upload-artifact@v4
        if: matrix.avx512 == 'ON'
        with:
          path: bin
          name: notepad4-${{ matrix.desc }}-avx512

  notepad4-nightly-mingw:
    runs-on: windows-latest
    strategy:
      matrix:
        include:
          - mingw_arch: UCRT64
            mingw_prefix: mingw-w64-ucrt-x86_64
            toolchains: gcc
            c: gcc
            cxx: g++
            cmake_prefix_path: /ucrt64
            stdlib: /ucrt64/bin/libstdc++-6.dll
            avx512: OFF
          - mingw_arch: CLANG64 
            mingw_prefix: mingw-w64-clang-x86_64
            toolchains: clang
            c: clang
            cxx: clang++
            cmake_prefix_path: /clang64
            stdlib: /clang64/bin/libc++.dll
            avx512: OFF
          - mingw_arch: MINGW64
            mingw_prefix: mingw-w64-x86_64
            toolchains: gcc
            c: gcc
            cxx: g++
            cmake_prefix_path: /mingw64
            stdlib: /mingw64/bin/libstdc++-6.dll
            avx512: OFF
          - mingw_arch: UCRT64
            mingw_prefix: mingw-w64-ucrt-x86_64
            toolchains: gcc
            c: gcc
            cxx: g++
            cmake_prefix_path: /ucrt64
            stdlib: /ucrt64/bin/libstdc++-6.dll
            avx512: ON  
          - mingw_arch: CLANG64 
            mingw_prefix: mingw-w64-clang-x86_64
            toolchains: clang
            c: clang
            cxx: clang++
            cmake_prefix_path: /clang64
            stdlib: /clang64/bin/libc++.dll
            avx512: ON  
          - mingw_arch: MINGW64
            mingw_prefix: mingw-w64-x86_64
            toolchains: gcc
            c: gcc
            cxx: g++
            cmake_prefix_path: /mingw64
            stdlib: /mingw64/bin/libstdc++-6.dll
            avx512: ON  
    steps:
      - uses: msys2/setup-msys2@v2
        with:
          update: true
          msystem: ${{ matrix.mingw_arch }}
          install: ${{ matrix.mingw_prefix }}-toolchain ${{ matrix.mingw_prefix }}-cmake ${{ matrix.mingw_prefix }}-ninja ${{ matrix.mingw_prefix }}-${{ matrix.toolchains }}  ${{ matrix.mingw_prefix }}-clang ${{ matrix.mingw_prefix }}-make ${{ matrix.mingw_prefix }}-openssl ${{ matrix.mingw_prefix }}-zstd ${{ matrix.mingw_prefix }}-libb2

      - uses: actions/checkout@v4
        with:
          ref: ${{ github.head_ref }}
          fetch-depth: 1
          submodules: true
                     
      - name: clone notepad4
        shell: cmd
        run: |
          git clone --recursive https://github.com/zufuliu/notepad4.git notepad4-src
          copy notepad4\CMakeLists.txt notepad4-src\
          
      - name: apply avx512 patch
        if: matrix.avx512 == 'ON'
        shell: cmd
        run: |
          copy notepad4\avx512.patch notepad4-src\
          cd notepad4-src
          git apply avx512.patch
          cd ..
                    
      - name: build
        shell: msys2 {0}
        run: |
          env MSYSTEM=${{ matrix.mingw_arch }} PATH=/${{ matrix.mingw_arch }}/bin:/usr/bin:$PATH cmake -DAVX512=${{ matrix.avx512 }} -DCMAKE_BUILD_TYPE=Release -DCMAKE_C_COMPILER=${{ matrix.c }} -DCMAKE_CXX_COMPILER=${{ matrix.cxx }} -G Ninja -S notepad4-src -B ${{ matrix.mingw_prefix }}-build
          env MSYSTEM=${{ matrix.mingw_arch }} PATH=/${{ matrix.mingw_arch }}/bin:/usr/bin:$PATH cmake --build ${{ matrix.mingw_prefix }}-build --parallel --verbose
          mkdir bin
          env MSYSTEM=${{ matrix.mingw_arch }} PATH=/${{ matrix.mingw_arch }}/bin:/usr/bin:$PATH cp ${{ matrix.mingw_prefix }}-build/notepad4.exe bin/
          env MSYSTEM=${{ matrix.mingw_arch }} PATH=/${{ matrix.mingw_arch }}/bin:/usr/bin:$PATH cp ${{ matrix.mingw_prefix }}-build/matepath.exe bin/
          env PATH=$PATH:/${{ matrix.mingw_arch }}/bin ldd bin/notepad4.exe | awk -v mingwarch="${{ matrix.mingw_arch }}" '{ arch = tolower(mingwarch); path = tolower($0);  if (path ~ "=> /" arch) print $(NF-1) }' | while read -r libpath; do cp -r $libpath bin/; done
          
      - name: upload executable artifact
        uses: actions/upload-artifact@v4
        if: matrix.avx512 == 'OFF'
        with:
          path: bin
          name: notepad4-${{ matrix.mingw_prefix }}-avx2

      - name: upload executable artifact
        uses: actions/upload-artifact@v4
        if: matrix.avx512 == 'ON'
        with:
          path: bin
          name: notepad4-${{ matrix.mingw_prefix }}-avx512
