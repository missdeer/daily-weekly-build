name: quiche
on: 
  schedule:
    - cron:  '0 17 * * *'
  push:
    paths:
      - '.github/workflows/quiche.yml'
  pull_request:
    paths:
      - '.github/workflows/quiche.yml'

env:
  RUSTFLAGS: "-D warnings"
  TOOLCHAIN: "stable"

jobs:
  quiche:
    runs-on: ubuntu-latest    
    steps:
      - name: Checkout sources
        uses: actions/checkout@v2
        with:
          repository: 'cloudflare/quiche'
          submodules: 'recursive'

      - name: Install stable toolchain
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: ${{ env.TOOLCHAIN }}
          components: clippy
          override: true

      - name: Install dependencies
        run: sudo apt-get install libev-dev uthash-dev

      - name: Run cargo test
        uses: actions-rs/cargo@v1
        with:
          command: build
          args: --examples --release --verbose --features qlog

      - name: Run cargo package
        uses: actions-rs/cargo@v1
        with:
          command: package
          args: --verbose --allow-dirty

      - name: Run cargo clippy
        uses: actions-rs/cargo@v1
        with:
          command: clippy
          args: --examples -- -D warnings

      - name: Run cargo doc
        uses: actions-rs/cargo@v1
        with:
          command: doc
          args: --no-deps

      - name: Build C examples
        run: make -C examples

  quiche_macos:
    runs-on: macos-latest    
    steps:
      - name: Checkout sources
        uses: actions/checkout@v2
        with:
          repository: 'cloudflare/quiche'
          submodules: 'recursive'

      - name: Install stable toolchain
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: ${{ env.TOOLCHAIN }}
          override: true

      - name: Run cargo test
        uses: actions-rs/cargo@v1
        with:
          command: build
          args: --verbose --release

      - name: Upload artifact quiche
        uses: actions/upload-artifact@v1.0.0
        with:
          name: quiche-mac-amd64
          path: target

      - name: prepare dependencies
        run: |
          brew install p7zip

      - name: Set up Go 1.15
        uses: actions/setup-go@v1
        with:
          go-version: 1.15
        id: go

      - name: Build transfer command
        run: |
          git clone --depth=1 https://github.com/missdeer/transfer.git gopath
          cd gopath
          go build -ldflags="-s -w" -o bin/transfer
          cd ..

      - name: upload to own file server
        run: |
          export GOPATH=$PWD/gopath
          cd target/release/
          7z a ../quiche-mac-amd64.7z libquiche.*
          cd ..
          ls -l
          curl -X POST -H "Content-Type: multipart/form-data" -F "originalFile=@quiche-mac-amd64.7z" ${{ secrets.FILE_SERVER }}
          $GOPATH/bin/transfer -m upload -c ${{ secrets.FILE_SERVER3 }} -p quic quiche-mac-amd64.7z

  quiche_ios:
    runs-on: macos-latest
    strategy:
      matrix:
        target: ["x86_64-apple-ios", "aarch64-apple-ios"]    
    steps:
      - name: Checkout sources
        uses: actions/checkout@v2
        with:
          repository: 'cloudflare/quiche'
          submodules: 'recursive'

      - name: Install stable toolchain
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: ${{ env.TOOLCHAIN }}
          target: ${{ matrix.target }}
          override: true

      - name: Run cargo build
        uses: actions-rs/cargo@v1
        with:
          command: build
          args: --target=${{ matrix.target }} --verbose --release

      - name: Upload artifact quiche
        uses: actions/upload-artifact@v1.0.0
        with:
          name: quiche-${{ matrix.target }}
          path: target/${{ matrix.target }}/release/libquiche.a

      - name: prepare dependencies
        run: |
          brew install p7zip

      - name: Set up Go 1.15
        uses: actions/setup-go@v1
        with:
          go-version: 1.15
        id: go

      - name: Build transfer command
        run: |
          git clone --depth=1 https://github.com/missdeer/transfer.git gopath
          cd gopath
          go build -ldflags="-s -w" -o bin/transfer
          cd ..

      - name: upload to own file server
        run: |
          export GOPATH=$PWD/gopath
          cd target/${{ matrix.target }}/release/
          7z a quiche-${{ matrix.target }}.7z *.a
          ls -l
          curl -X POST -H "Content-Type: multipart/form-data" -F "originalFile=@quiche-${{ matrix.target }}.7z" ${{ secrets.FILE_SERVER }}
          $GOPATH/bin/transfer -m upload -c ${{ secrets.FILE_SERVER3 }} -p quic quiche-${{ matrix.target }}.7z

  quiche_windows:
    runs-on: windows-latest
    strategy:
      matrix:
        target: ["x86_64-pc-windows-msvc", "i686-pc-windows-msvc"]    
    steps:
      - name: Checkout sources
        uses: actions/checkout@v2
        with:
          repository: 'cloudflare/quiche'
          submodules: 'recursive'

      - name: Install stable toolchain
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: ${{ env.TOOLCHAIN }}
          target: ${{ matrix.target }}
          override: true

      - name: Install dependencies
        uses: crazy-max/ghaction-chocolatey@v1
        with:
          args: install nasm

      - name: Run cargo test
        uses: actions-rs/cargo@v1
        with:
          command: build
          args: --target=${{ matrix.target }} --verbose --release
          
      - name: Upload artifact quiche
        uses: actions/upload-artifact@v1.0.0
        with:
          name: quiche-${{ matrix.target }}
          path: target/${{ matrix.target }}/release/deps/

      - name: Set up Go 1.15
        uses: actions/setup-go@v1
        with:
          go-version: 1.15
        id: go

      - name: Build transfer command
        run: |
          git clone --depth=1 https://github.com/missdeer/transfer.git gopath
          cd gopath
          go build -ldflags="-s -w" -o bin\transfer.exe
          cd ..
          
      - name: upload to own file server
        shell: cmd
        run: |
          set TRANSFER=%CD%\gopath\bin\transfer.exe
          cd target\${{ matrix.target }}\release
          7z.exe a quiche-${{ matrix.target }}.7z deps\*.lib deps\*.dll*
          dir
          curl -X POST -H "Content-Type: multipart/form-data" -F "originalFile=@quiche-${{ matrix.target }}.7z" ${{ secrets.FILE_SERVER }}
          echo %TRANSFER%
          "%TRANSFER%" -m upload -c ${{ secrets.FILE_SERVER3 }} -p quic quiche-${{ matrix.target }}.7z

  quiche_multiarch:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        target: ["aarch64-unknown-linux-gnu","armv7-unknown-linux-gnueabihf","i686-unknown-linux-gnu"]    
    steps:
      - name: Checkout sources
        uses: actions/checkout@v2
        with:
          repository: 'cloudflare/quiche'
          submodules: 'recursive'

      - name: Install stable toolchain
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: ${{ env.TOOLCHAIN }}
          target: ${{ matrix.target }}
          override: true

      - name: Run cargo test
        uses: actions-rs/cargo@v1
        with:
          command: build
          args: --target=${{ matrix.target }} --verbose --release
          use-cross: true

      - name: Upload artifact quiche
        uses: actions/upload-artifact@v1.0.0
        with:
          name: quiche-${{ matrix.target }}
          path: target/${{ matrix.target }}/release/deps/

      - name: install p7zip
        run: |
          sudo apt-get update -qq ;
          sudo apt-get install -qq p7zip-full;
          
      - name: Set up Go 1.15
        uses: actions/setup-go@v1
        with:
          go-version: 1.15
        id: go

      - name: Build transfer command
        run: |
          git clone --depth=1 https://github.com/missdeer/transfer.git gopath
          cd gopath
          go build -ldflags="-s -w" -o bin/transfer
          cd ..

      - name: upload to own file server
        run: |
          export GOPATH=$PWD/gopath
          cd target/${{ matrix.target }}/release/
          7z a quiche-${{ matrix.target }}.7z deps/libquiche.*
          ls -l
          curl -X POST -H "Content-Type: multipart/form-data" -F "originalFile=@quiche-${{ matrix.target }}.7z" ${{ secrets.FILE_SERVER }}
          sudo sysctl -w net.core.rmem_max=2500000
          $GOPATH/bin/transfer -m upload -c ${{ secrets.FILE_SERVER3 }} -p quic quiche-${{ matrix.target }}.7z

  apps:
    runs-on: ubuntu-latest    
    steps:
      - name: Checkout sources
        uses: actions/checkout@v2
        with:
          repository: 'cloudflare/quiche'
          submodules: 'recursive'

      - name: Install stable toolchain
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: ${{ env.TOOLCHAIN }}
          override: true

      - name: Run cargo build
        uses: actions-rs/cargo@v1
        with:
          command: test
          args: --verbose --manifest-path=tools/apps/Cargo.toml

      - name: Run cargo clippy
        uses: actions-rs/cargo@v1
        with:
          command: clippy
          args: --manifest-path=tools/apps/Cargo.toml -- -D warnings

  qlog:
    runs-on: ubuntu-latest    
    steps:
      - name: Checkout sources
        uses: actions/checkout@v2
        with:
          repository: 'cloudflare/quiche'
          submodules: 'recursive'

      - name: Install stable toolchain
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: ${{ env.TOOLCHAIN }}
          override: true

      - name: Run cargo test
        uses: actions-rs/cargo@v1
        with:
          command: test
          args: --verbose --manifest-path=tools/qlog/Cargo.toml

      - name: Run cargo clippy
        uses: actions-rs/cargo@v1
        with:
          command: clippy
          args: --manifest-path=tools/qlog/Cargo.toml -- -D warnings

  http3_test:
    runs-on: ubuntu-latest    
    steps:
      - name: Checkout sources
        uses: actions/checkout@v2
        with:
          repository: 'cloudflare/quiche'
          submodules: 'recursive'

      - name: Install stable toolchain
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: ${{ env.TOOLCHAIN }}
          override: true

      - name: Run cargo test
        uses: actions-rs/cargo@v1
        with:
          command: test
          args: --no-run --verbose --manifest-path=tools/http3_test/Cargo.toml

      - name: Run cargo clippy
        uses: actions-rs/cargo@v1
        with:
          command: clippy
          args: --manifest-path=tools/http3_test/Cargo.toml -- -D warnings

  nginx:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        version: ["1.16.1"]    
    steps:
      - name: Checkout sources
        uses: actions/checkout@v2
        with:
          repository: 'cloudflare/quiche'
          submodules: 'recursive'

      - name: Install stable toolchain
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: ${{ env.TOOLCHAIN }}
          override: true

      - name: Install dependencies
        run: sudo apt-get install libpcre3-dev zlib1g-dev

      - name: Download NGINX sources
        run: curl -O https://nginx.org/download/nginx-${{ matrix.version }}.tar.gz

      - name: Extract NGINX sources
        run: tar xzf nginx-${{ matrix.version }}.tar.gz

      - name: Build NGINX
        run: |
          cd nginx-${{ matrix.version }} &&
          patch -p01 < ../extras/nginx/nginx-1.16.patch &&
          ./configure --with-cc-opt="-static -static-libgcc" --with-ld-opt=-static --with-http_ssl_module --with-http_v2_module --with-http_v3_module --with-openssl="../deps/boringssl" --with-quiche=".." &&
          make -j`nproc` &&
          objs/nginx -V

      - name: Upload artifact nginx
        uses: actions/upload-artifact@v1.0.0
        with:
          name: nginx-ubuntu-amd64
          path: nginx-${{ matrix.version }}/objs/nginx

      - name: install p7zip
        run: |
          sudo apt-get update -qq ;
          sudo apt-get install -qq p7zip-full;

      - name: Set up Go 1.15
        uses: actions/setup-go@v1
        with:
          go-version: 1.15
        id: go

      - name: Build transfer command
        run: |
          git clone --depth=1 https://github.com/missdeer/transfer.git gopath
          cd gopath
          go build -ldflags="-s -w" -o bin/transfer
          cd ..
          
      - name: upload to own file server
        run: |
          export GOPATH=$PWD/gopath
          cd nginx-${{ matrix.version }}/objs/
          7z a nginx-ubuntu-amd64.7z nginx
          ls -l
          curl -X POST -H "Content-Type: multipart/form-data" -F "originalFile=@nginx-ubuntu-amd64.7z" ${{ secrets.FILE_SERVER }}
          sudo sysctl -w net.core.rmem_max=2500000
          $GOPATH/bin/transfer -m upload -c ${{ secrets.FILE_SERVER3 }} -p quic nginx-ubuntu-amd64.7z
          
  docker:
    runs-on: ubuntu-latest    
    steps:
      - name: Checkout sources
        uses: actions/checkout@v2
        with:
          repository: 'cloudflare/quiche'
          submodules: 'recursive'

      - name: Build Docker images
        run: make docker-build

  android_ndk_lts:
    runs-on: ubuntu-latest
    env:
      NDK_LTS_VER: "22"
    strategy:
      matrix:
        target: ["aarch64-linux-android","armv7-linux-androideabi","x86_64-linux-android","i686-linux-android"]
        include:
          - target: "aarch64-linux-android"
            arch: "arm64-v8a"
          - target: "armv7-linux-androideabi"
            arch: "armeabi-v7a"
          - target: "x86_64-linux-android"
            arch: "x86_64"
          - target: "i686-linux-android"
            arch: "x86"    
    steps:
      - name: Checkout sources
        uses: actions/checkout@v2
        with:
          repository: 'cloudflare/quiche'
          submodules: 'recursive'

      - name: Install stable toolchain for the target
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: ${{ env.TOOLCHAIN }}
          target: ${{ matrix.target }}
          override: true

      - name: Install cargo-ndk
        uses: actions-rs/install@v0.1
        with:
          crate: cargo-ndk

      - name: Download NDK
        run: curl --http1.1 -O https://dl.google.com/android/repository/android-ndk-r${{ env.NDK_LTS_VER }}-linux-x86_64.zip

      - name: Extract NDK
        run: unzip -q android-ndk-r${{ env.NDK_LTS_VER }}-linux-x86_64.zip

      - name: Run cargo ndk
        uses: actions-rs/cargo@v1
        with:
          command: ndk
          args: -t ${{ matrix.arch }} -p ${{ env.NDK_LTS_VER }} -- build --verbose --features ffi --release
        env:
          ANDROID_NDK_HOME: ${{ github.workspace }}/android-ndk-r${{ env.NDK_LTS_VER  }}

      - name: Upload artifact quiche
        uses: actions/upload-artifact@v1.0.0
        with:
          name: quiche-${{ matrix.target }}
          path: target/${{ matrix.target }}/release/deps

      - name: install p7zip
        run: |
          sudo apt-get update -qq ;
          sudo apt-get install -qq p7zip-full;
          
      - name: Set up Go 1.15
        uses: actions/setup-go@v1
        with:
          go-version: 1.15
        id: go

      - name: Build transfer command
        run: |
          git clone --depth=1 https://github.com/missdeer/transfer.git gopath
          cd gopath
          go build -ldflags="-s -w" -o bin/transfer
          cd ..

      - name: upload to own file server
        run: |
          export GOPATH=$PWD/gopath
          cd target/${{ matrix.target }}/release/
          7z a quiche-${{ matrix.target }}.7z deps/libquiche.*
          ls -l
          curl -X POST -H "Content-Type: multipart/form-data" -F "originalFile=@quiche-${{ matrix.target }}.7z" ${{ secrets.FILE_SERVER }}
          sudo sysctl -w net.core.rmem_max=2500000
          $GOPATH/bin/transfer -m upload -c ${{ secrets.FILE_SERVER3 }} -p quic quiche-${{ matrix.target }}.7z
