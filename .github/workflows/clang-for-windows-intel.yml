name: Clang for Windows Intel
on: 
  push:
    paths:
      - '.github/workflows/clang-for-windows-intel.yml'
  pull_request:
    paths:
      - '.github/workflows/clang-for-windows-intel.yml'
      
env:
  WINDOWS_BASEKIT_URL: https://registrationcenter-download.intel.com/akdlm/IRC_NAS/f5881e61-dcdc-40f1-9bd9-717081ac623c/intel-oneapi-base-toolkit-2025.2.1.46_offline.exe
  WINDOWS_HPCKIT_URL: https://registrationcenter-download.intel.com/akdlm/IRC_NAS/e63ac2b4-8a9a-4768-979a-399a8b6299de/intel-oneapi-hpc-toolkit-2025.2.1.46_offline.exe
  WINDOWS_CPP_COMPONENTS: intel.oneapi.win.cpp-dpcpp-common
  WINDOWS_DPCPP_COMPONENTS: intel.oneapi.win.cpp-dpcpp-common
  CACHE_NUMBER: 5
  SAMPLES_TAG: 2025.2.0
  AI_SAMPLES_TAG: 2025.0.0
  COMPILER_VERSION: 2025.2
  TBB_VERSION: 2022.2
  VS_VER: vs2022
      
      
jobs:
  clang-for-windows-bootstrap:
    runs-on: windows-latest
    strategy:
      matrix:
        include:
          - msvc_arch: x64
            compiler: icx
    env:
      targetName: llvm-win-intel-${{ matrix.msvc_arch }}
      
    steps:
      - name: cache intel install
        id: cache-install
        uses: actions/cache@v4
        with:
          path: |
              C:\Program Files (x86)\Intel\oneAPI\setvars-vcvarsall.bat
              C:\Program Files (x86)\Intel\oneAPI\compiler
          key: install-${{ env.CACHE_NUMBER }}-${{ env.WINDOWS_HPCKIT_URL }}-${{ env.WINDOWS_CPP_COMPONENTS }}-compiler-${{ hashFiles('**/scripts/cache_exclude_windows.sh') }}

      - name: install intel
        if: steps.cache-install.outputs.cache-hit != 'true'
        run: |
          git clone --depth=1 https://github.com/oneapi-src/oneapi-ci.git oneapi-ci
          cd oneapi-ci
          scripts/install_windows.bat ${{ env.WINDOWS_HPCKIT_URL }} ${{ env.WINDOWS_CPP_COMPONENTS }}

      - name: Checkout llvm-project
        shell: cmd
        run: |
          git clone --depth=1 --single-branch --branch main https://github.com/llvm/llvm-project.git

      - name: build-msvc
        shell: cmd
        env:
          vc_arch: ${{ matrix.msvc_arch }}
        run: |
          call "C:\Program Files\Microsoft Visual Studio\2022\Enterprise\VC\Auxiliary\Build\vcvarsall.bat" %vc_arch%
          for /f "tokens=* usebackq" %%f in (`dir /b "C:\Program Files (x86)\Intel\oneAPI\compiler\" ^| findstr /V latest ^| sort`) do @set "LATEST_VERSION=%%f"
          echo %LATEST_VERSION%
          call "C:\Program Files (x86)\Intel\oneAPI\compiler\%LATEST_VERSION%\env\vars.bat"
          set PATH="C:\Program Files (x86)\Intel\oneAPI\compiler\%LATEST_VERSION%\bin\";%CD%\llvm\bin;%CD%\jom;%PATH%
          dir
          mkdir llvm-project\build
          dir llvm-project
          cd llvm-project\build
          cmake.exe -GNinja -DCMAKE_C_COMPILER=icx -DCMAKE_CXX_COMPILER=icx -DCMAKE_BUILD_TYPE=release -DLLVM_BUILD_TESTS=OFF -DLLVM_INCLUDE_TESTS=OFF -DLLVM_ENABLE_PROJECTS="clang;clang-tools-extra;lld;mlir" -DLLVM_ENABLE_RUNTIMES="compiler-rt;libcxx;openmp" -DLLVM_TARGETS_TO_BUILD=X86 -DCMAKE_C_FLAGS="/utf-8" -DCMAKE_CXX_FLAGS="/utf-8" -DCMAKE_INSTALL_PREFIX=llvm_win_bin -DLLVM_TEMPORARILY_ALLOW_OLD_TOOLCHAIN=ON -DLLVM_USE_INTEL_JITEVENTS=ON -DLLVM_INCLUDE_EXAMPLES=OFF -DLLVM_INCLUDE_DOCS=OFF -DLLVM_ENABLE_RTTI=ON -DLLVM_ENABLE_LIBXML2=ON -DLLVM_ENABLE_ZLIB=ON -DLLVM_ENABLE_EH=ON -DLIBOMP_USE_QUAD_PRECISION=OFF ..\llvm
          ninja
          ninja install
          del /s /q *.obj
          del /s /q *.cpp
          del /s /q *.cxx

      - name: upload executable artifact
        uses: actions/upload-artifact@v4
        with:
          path: llvm-project\build\llvm_win_bin\bin
          name: llvm-win-intel-${{ matrix.msvc_arch }}

      - name: upload devel artifact
        uses: actions/upload-artifact@v4
        with:
          path: llvm-project\build\llvm_win_bin\
          name: llvm-win-intel-${{ matrix.msvc_arch }}-dev

