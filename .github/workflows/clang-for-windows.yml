name: Clang for Windows
on: 
  schedule:
    - cron:  '0 18 * * *'
  push:
    paths:
      - '.github/workflows/clang-for-windows.yml'
  pull_request:
    paths:
      - '.github/workflows/clang-for-windows.yml'
jobs:
  build:
    name: Build
    runs-on: windows-2019
    strategy:
      matrix:
        include:
          - msvc_arch: x64
            clang_link: https://github.com/llvm/llvm-project/releases/download/llvmorg-13.0.1-rc3/LLVM-13.0.1-rc3-win64.exe
            compiler: clang-cl
          - msvc_arch: x86
            clang_link: https://github.com/llvm/llvm-project/releases/download/llvmorg-13.0.1-rc3/LLVM-13.0.1-rc3-win32.exe
            compiler: clang-cl
    env:
      targetName: llvm-win-${{ matrix.msvc_arch }}
    steps:
      - name: Set up clang for Windows
        shell: cmd
        run: |
          mkdir llvm
          cd llvm
          curl.exe -o LLVM.exe -L ${{ matrix.clang_link }}
          7z.exe x LLVM.exe
          cd ..

      - name: Checkout llvm-project
        shell: cmd
        run: |
          git clone --depth=1 https://github.com/llvm/llvm-project.git

      - name: build-msvc
        shell: cmd
        env:
          vc_arch: ${{ matrix.msvc_arch }}
        run: |
          call "C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Auxiliary\Build\vcvarsall.bat" %vc_arch%
          set PATH=%CD%\llvm\bin;%PATH%
          mkdir -p llvm-project\build
          cd llvm-project\build
          set CC=${{ matrix.compiler }}
          set CXX=${{ matrix.compiler }}
          cmake.exe -GNinja -DCMAKE_C_COMPILER=${{ matrix.compiler }} -DCMAKE_CXX_COMPILER=${{ matrix.compiler }} -DCMAKE_BUILD_TYPE=release -DLLVM_BUILD_TESTS=OFF -DLLVM_INCLUDE_TESTS=OFF -DLLVM_ENABLE_PROJECTS="clang;clang-tools-extra;lld" -DLLVM_TARGETS_TO_BUILD=all -DCMAKE_C_FLAGS="/utf-8" -DCMAKE_CXX_FLAGS="/utf-8" -DCMAKE_INSTALL_PREFIX=llvm_win_bin -DLLVM_TEMPORARILY_ALLOW_OLD_TOOLCHAIN=ON -DLLVM_USE_INTEL_JITEVENTS=ON -DLLVM_INCLUDE_EXAMPLES=OFF -DLLVM_INCLUDE_DOCS=OFF -DLLVM_ENABLE_RTTI=ON -DLLVM_ENABLE_LIBXML2=ON -DLLVM_ENABLE_ZLIB=ON ..\llvm
          ninja
          ninja install
          del /s /q *.obj

      - name: upload executable artifact
        uses: actions/upload-artifact@v1
        with:
          path: llvm-project\build\llvm_win_bin\bin
          name: llvm-win-${{ matrix.msvc_arch }}

      - name: upload devel artifact
        uses: actions/upload-artifact@v1
        with:
          path: llvm-project\build\llvm_win_bin\
          name: llvm-win-${{ matrix.msvc_arch }}-dev

      - name: Set up Go
        uses: actions/setup-go@v1
        with:
          go-version: 1.17
        id: go

      - name: Build transfer command
        run: |
          git clone --depth=1 https://github.com/missdeer/transfer.git gopath
          cd gopath
          go get
          go build -ldflags="-s -w" -o bin\transfer.exe
          cd ..
          
      - name: upload to own file server
        shell: cmd
        run: |
          set TRANSFER=%CD%\gopath\bin\transfer.exe
          cd llvm-project\build\llvm_win_bin\bin
          7z.exe a ..\llvm-win-${{ matrix.msvc_arch }}.zip *
          cd ..
          dir
          curl -X POST -H "Content-Type: multipart/form-data" -F "originalFile=@llvm-win-${{ matrix.msvc_arch }}.zip" ${{ secrets.FILE_SERVER }}
          del /q llvm-win-${{ matrix.msvc_arch }}.zip
          7z.exe a llvm-win-${{ matrix.msvc_arch }}-dev.zip bin include lib libexec share
          dir
          curl -X POST -H "Content-Type: multipart/form-data" -F "originalFile=@llvm-win-${{ matrix.msvc_arch }}-dev.zip" ${{ secrets.FILE_SERVER }}
